ASSEMBLY SEM COMPLICAÇÕES

                
                ld r1, 1            ---sempre terá valor 1 para incrementar  
                ld r2, 2            ---valor e endereço que sera guardado na ram
                ld r5, 36            --valor limite, raiz do numero limite arredondado para baixo
                ld r3, 511          ---valor final, sera usado para verificar fim do loop
                movr a, r3
                addi 511
                addi 337
                mova r3, a
        |       movr a, r2
        |       sw r2
        |       movr a, r1
        |       add r2
        |       mova r2, a
        |       sub r3
        |       jc -6
                ld r2, 2            
|               movr a, r2
|               add r2              
|               mova r4, a
|        |      movr a, r0                                             
|        |      sw r4               
|        |      movr a, r4
|        |      add r2
|        |      mova r4, a
|        |      sub r3              
|        |      jc -6               
|               movr a, r2          
|               add r1
|               mova r2
|               movr a, r5          
|               sub r2
|               jc -15       

ROM SEM COMPLICAÇÕES

      0  => B"0011_001_000_000001",--ld r1, 1       
      1  => B"0011_010_000_000010",--ld r2, 2       
      2  => B"0011_101_000_100100",--ld r5, 36     
      3  => B"0011_011_111_111111",--ld r3, 511
      4  => B"1000_000_011_000000",--movr a, r3
      5  => B"0010_000_111_111111",--addi 511
      6  => B"0010_000_101_010001",--addi 337
      7  => B"0111_011_000_000000",--mova r3, a
      8  => B"1000_000_010_000000",--movr a, r2       
      9  => B"1101_000_010_000000",--sw r2    
     10  => B"1000_000_001_000000",--movr a, r1
     11  => B"0001_000_010_000000",--add r2     
     12  => B"0111_010_000_000000",--mova r2, a
     13  => B"0100_000_011_000000",--sub r3    
     14  => B"1011_111_111_111010",--jc -6
     15  => B"0011_010_000_000010",--ld r2, 2
     16  => B"1000_000_010_000000",--movr a, r2
     17  => B"0001_000_010_000000",--add r2
     18  => B"0111_100_000_000000",--mova r4, a
     19  => B"1000_000_000_000000",--movr a, r0
     20  => B"1101_000_100_000000",--sw r4
     21  => B"1000_000_100_000000",--movr a, r4
     22  => B"0001_000_010_000000",--add r2
     23  => B"0111_100_000_000000",--mova r4, a
     24  => B"0100_000_011_000000",--sub r3
     25  => B"1011_111_111_111010",--jc -6
     26  => B"1000_000_010_000000",--movr a, r2
     27  => B"0001_000_001_000000",--add r1
     28  => B"0111_010_000_000000",--mova r2, a
     29  => B"1000_000_010_000000",--movr a, r2
     30  => B"0100_000_101_000000",--sub r5
     31  => B"1011_111_111_110001",--jc -15

ASSEMBLY COM COMPLICAÇÕES

                ld r1, 1            ---sempre terá valor 1 para incrementar  
                ld r2, 2            ---valor e endereço que sera guardado na ram
                ld r5, 36            --valor limite, raiz do numero limite arredondado para baixo
                ld r3, 511          ---valor final, sera usado para verificar fim do loop
                movr a, r3
                addi 511
                addi 337
                mova r3, a
        |       movr a, r2
        |       sw r2
        |       movr a, r1
        |       add r2
        |       mova r2, a
        |       sub r3
        |       jc -6
                ld r2, 2            ---crivo
|               movr a, r2
|               add r2              
|               mova r4, a
|        |      movr a, r0                                             
|        |      sw r4               
|        |      movr a, r4
|        |      add r2
|        |      mova r4, a
|        |      sub r3              
|        |      jc -6               
|               movr a, r2          
|               add r1
|               mova r2, a
|               movr a, r2          
|               sr a, 6
|               mova r7, a
|               jz -16       

ROM COM COMPLICAÇÕES

      0  => B"0011_001_000_000001",--ld r1, 1       
      1  => B"0011_010_000_000010",--ld r2, 2       
      2  => B"0011_101_000_100100",--ld r5, 36     
      3  => B"0011_011_111_111111",--ld r3, 511
      4  => B"1000_000_011_000000",--movr a, r3
      5  => B"0010_000_111_111111",--addi 511
      6  => B"0010_000_101_010001",--addi 337
      7  => B"0111_011_000_000000",--mova r3, a
      8  => B"1000_000_010_000000",--movr a, r2       
      9  => B"1101_000_010_000000",--sw r2    
     10  => B"1000_000_001_000000",--movr a, r1
     11  => B"0001_000_010_000000",--add r2     
     12  => B"0111_010_000_000000",--mova r2, a
     13  => B"0100_000_011_000000",--sub r3    
     14  => B"1011_111_111_111010",--jc -6
     15  => B"0011_010_000_000010",--ld r2, 2
     16  => B"1000_000_010_000000",--movr a, r2
     17  => B"0001_000_010_000000",--add r2
     18  => B"0111_100_000_000000",--mova r4, a
     19  => B"1000_000_000_000000",--movr a, r0
     20  => B"1101_000_100_000000",--sw r4
     21  => B"1000_000_100_000000",--movr a, r4
     22  => B"0001_000_010_000000",--add r2
     23  => B"0111_100_000_000000",--mova r4, a
     24  => B"0100_000_011_000000",--sub r3
     25  => B"1011_111_111_111010",--jc -6
     26  => B"1000_000_010_000000",--movr a, r2
     27  => B"0001_000_001_000000",--add r1
     28  => B"0111_010_000_000000",--mova r2, a
     29  => B"1000_000_010_000000",--movr a, r2
     30  => B"1110_000_000_000110",--sr a, 6
     31  => B"0111_111_000_000000",--mova r7, a
     32  => B"1010_111_111_110000",--jz -16




    


               